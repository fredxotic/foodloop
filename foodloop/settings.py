"""
Django settings for FoodLoop project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
import sys
from pathlib import Path
import dj_database_url
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =============================================================================
# CORE SETTINGS
# =============================================================================

# Security settings - USE ENVIRONMENT VARIABLES IN PRODUCTION
SECRET_KEY = os.environ.get('SECRET_KEY', config('SECRET_KEY', default='your-production-secret-key-change-this'))
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
DEVELOPMENT = os.environ.get('DEVELOPMENT', 'False').lower() == 'true'

# Hosts configuration
ALLOWED_HOSTS = [
    "fredxotic.pythonanywhere.com",
    "www.fredxotic.pythonanywhere.com",  # Add www subdomain
]

# Add localhost for management commands
if DEBUG:
    ALLOWED_HOSTS.extend(["127.0.0.1", "localhost", "0.0.0.0"])

# =============================================================================
# APPLICATION DEFINITION
# =============================================================================

# Base installed apps
BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Third-party apps
THIRD_PARTY_APPS = [
    'compressor',
]

# Project apps
PROJECT_APPS = [
    'core',
]

# Combine apps
INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + PROJECT_APPS

# =============================================================================
# MIDDLEWARE
# =============================================================================

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# =============================================================================
# TEMPLATES
# =============================================================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.user_profile',
            ],
        },
    },
]

# =============================================================================
# DATABASE
# =============================================================================

# Use SQLite for PythonAnywhere (compatible with free tier)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Optional: If you want to use PostgreSQL (requires paid tier)
# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'),
#         conn_max_age=600,
#         ssl_require=not DEVELOPMENT
#     )
# }

# =============================================================================
# PASSWORD VALIDATION (Less strict for better UX)
# =============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'max_similarity': 0.7,  # Less strict than default 0.7
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # Reasonable minimum
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    # Removed NumericPasswordValidator for better UX
]

# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# =============================================================================
# STATIC FILES (CSS, JavaScript, Images)
# =============================================================================

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# =============================================================================
# MEDIA FILES (Uploaded by users)
# =============================================================================

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# =============================================================================
# URL CONFIGURATION
# =============================================================================

ROOT_URLCONF = 'foodloop.urls'
WSGI_APPLICATION = 'foodloop.wsgi.application'

# =============================================================================
# CACHE CONFIGURATION (Using file-based cache for PythonAnywhere free tier)
# =============================================================================

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': BASE_DIR / 'django_cache',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}

# =============================================================================
# COMPRESSOR CONFIGURATION
# =============================================================================

COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = not DEBUG

COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSMinFilter',
]

COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# =============================================================================
# EMAIL CONFIGURATION - PRODUCTION READY
# =============================================================================

# For PythonAnywhere, use their SMTP or your Gmail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', config('EMAIL_HOST', default='smtp.gmail.com'))
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', config('EMAIL_PORT', default=587)))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', config('EMAIL_USE_TLS', default=True, cast=bool))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', config('EMAIL_HOST_USER', default='charlesfred285@gmail.com'))
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', config('EMAIL_HOST_PASSWORD', default='weia npua yyni juxz'))
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', config('DEFAULT_FROM_EMAIL', default='FoodLoop <charlesfred285@gmail.com>'))

# Base URL for email links
if DEBUG:
    EMAIL_VERIFICATION_URL = 'http://127.0.0.1:8000'
else:
    EMAIL_VERIFICATION_URL = 'https://fredxotic.pythonanywhere.com'

# =============================================================================
# SECURITY SETTINGS (Production)
# =============================================================================

if not DEBUG:
    # HTTPS settings (PythonAnywhere provides SSL)
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Other security settings
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'
    
    # CSRF trusted origins
    CSRF_TRUSTED_ORIGINS = [
        'https://fredxotic.pythonanywhere.com',
        'https://www.fredxotic.pythonanywhere.com',
    ]

# =============================================================================
# AUTHENTICATION
# =============================================================================

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Session settings
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_SAVE_EVERY_REQUEST = True

# =============================================================================
# LOGGING (Production-appropriate)
# =============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}

# =============================================================================
# DEFAULT AUTO FIELD
# =============================================================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# FOODLOOP SPECIFIC SETTINGS
# =============================================================================

FOODLOOP_SETTINGS = {
    'MAX_DONATION_QUANTITY': 1000,
    'DONATION_EXPIRY_DAYS': 7,
    'MAX_IMAGE_SIZE': 5 * 1024 * 1024,  # 5MB
    'ALLOWED_IMAGE_TYPES': ['image/jpeg', 'image/png', 'image/gif'],
    'SITE_URL': 'https://fredxotic.pythonanywhere.com',
}

# =============================================================================
# PERFORMANCE OPTIMIZATIONS
# =============================================================================

# Database connection persistence
DATABASES['default']['CONN_MAX_AGE'] = 60  # 1 minute

# Template caching in production
if not DEBUG:
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]

# =============================================================================
# ENVIRONMENT CHECKS
# =============================================================================

if DEBUG:
    print("🚀 Development mode: DEBUG=True")
else:
    print("🏭 Production mode: DEBUG=False")
    print("🔒 Security headers enabled")
    print("📧 Using SMTP email backend")

# Check for required settings in production
if not DEBUG:
    if SECRET_KEY == 'your-production-secret-key-change-this':
        print("❌ WARNING: You should change the default SECRET_KEY in production!")
    
    # Validate email configuration
    if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
        print("❌ WARNING: Email configuration may be incomplete")

print(f"✅ Settings loaded successfully for {'development' if DEBUG else 'production'}")