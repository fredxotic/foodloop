"""
Django settings for FoodLoop project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
import sys
from pathlib import Path
import dj_database_url
import socket
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =============================================================================
# CORE SETTINGS
# =============================================================================

# Security settings
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-dev-key-change-in-production')
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'
DEVELOPMENT = os.environ.get('DEVELOPMENT', 'True').lower() == 'true'

# Hosts configuration
ALLOWED_HOSTS = [
    "127.0.0.1", 
    "localhost", 
    "0.0.0.0",
    "fredxotic.pythonanywhere.com",
]

# Add hostname for development
try:
    ALLOWED_HOSTS.append(socket.gethostname())
except:
    pass

# Add your production domain here
if not DEBUG:
    ALLOWED_HOSTS.extend([
        'yourdomain.com',
        'www.yourdomain.com',
    ])

# =============================================================================
# APPLICATION DEFINITION
# =============================================================================

# Base installed apps
BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Third-party apps
THIRD_PARTY_APPS = [
    'compressor',
]

# Project apps
PROJECT_APPS = [
    'core',
]

# Development-specific apps
DEV_APPS = [
    # Add development-only apps here
]

# Production-specific apps
PROD_APPS = [
    'channels',
]

# Combine apps based on environment
INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + PROJECT_APPS

if DEVELOPMENT:
    INSTALLED_APPS = DEV_APPS + INSTALLED_APPS
else:
    INSTALLED_APPS = PROD_APPS + INSTALLED_APPS

# =============================================================================
# MIDDLEWARE
# =============================================================================

BASE_MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE = BASE_MIDDLEWARE

# =============================================================================
# TEMPLATES
# =============================================================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.user_profile',
            ],
        },
    },
]

# =============================================================================
# DATABASE
# =============================================================================

if DEVELOPMENT:
    # Development database (SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Production database (PostgreSQL)
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            ssl_require=not DEVELOPMENT
        )
    }

# =============================================================================
# PASSWORD VALIDATION
# =============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# =============================================================================
# STATIC FILES (CSS, JavaScript, Images)
# =============================================================================

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# =============================================================================
# MEDIA FILES (Uploaded by users)
# =============================================================================

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# =============================================================================
# URL CONFIGURATION
# =============================================================================

ROOT_URLCONF = 'foodloop.urls'

# =============================================================================
# WSGI/ASGI CONFIGURATION
# =============================================================================

# if DEVELOPMENT and 'runserver' in sys.argv:
#     # Use WSGI for development
#     WSGI_APPLICATION = 'foodloop.wsgi.application'
# else:
#     # Use ASGI for production (with Channels)
#     ASGI_APPLICATION = 'foodloop.asgi.application'

# =============================================================================
# CHANNELS (WebSockets)
# =============================================================================

# if not DEVELOPMENT:
#     CHANNEL_LAYERS = {
#         'default': {
#             'BACKEND': 'channels_redis.core.RedisChannelLayer',
#             'CONFIG': {
#                 'hosts': [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
#             },
#         },
#     }
# else:
#     CHANNEL_LAYERS = {
#         'default': {
#             'BACKEND': 'channels.layers.InMemoryChannelLayer'
#         }
#     }

# =============================================================================
# CACHE CONFIGURATION
# =============================================================================

if DEVELOPMENT:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.environ.get('REDIS_URL', 'redis://localhost:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

# =============================================================================
# COMPRESSOR CONFIGURATION
# =============================================================================

COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = not DEBUG

COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSMinFilter',
]

COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# =============================================================================
# EMAIL CONFIGURATION - REAL GMAIL SENDING
# =============================================================================

if DEVELOPMENT:
    # REAL Gmail sending in development
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'charlesfred285@gmail.com'  # FIXED: removed extra @
    EMAIL_HOST_PASSWORD = 'weia npua yyni juxz'   # Your app password
    DEFAULT_FROM_EMAIL = 'FoodLoop <charlesfred285@gmail.com>'
    
    # Base URL for email links
    EMAIL_VERIFICATION_URL = 'http://127.0.0.1:8000'
    
    print("📧 Development mode: Sending REAL emails via Gmail")
    
else:
    # Production email settings
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='FoodLoop <noreply@foodloop.com>')
    EMAIL_VERIFICATION_URL = 'https://fredxotic.pythonanywhere.com'

# =============================================================================
# SECURITY SETTINGS (Production only)
# =============================================================================

if not DEVELOPMENT:
    # HTTPS settings
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Other security settings
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# =============================================================================
# AUTHENTICATION
# =============================================================================

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# =============================================================================
# LOGGING
# =============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# =============================================================================
# DEFAULT AUTO FIELD
# =============================================================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# CUSTOM SETTINGS
# =============================================================================

# FoodLoop specific settings
FOODLOOP_SETTINGS = {
    'MAX_DONATION_QUANTITY': 1000,
    'DONATION_EXPIRY_DAYS': 7,
    'MAX_IMAGE_SIZE': 5 * 1024 * 1024,  # 5MB
    'ALLOWED_IMAGE_TYPES': ['image/jpeg', 'image/png', 'image/gif'],
}

# =============================================================================
# ENVIRONMENT CHECKS
# =============================================================================

if DEVELOPMENT:
    print("🚀 Development mode: DEBUG=True, Using SQLite database")
    print("📧 Emails will be printed to console")
else:
    print("🏭 Production mode: DEBUG=False")
    print("🔒 Security headers enabled")
    print("📧 Using SMTP email backend")

# Ensure required environment variables in production
if not DEVELOPMENT:
    required_vars = ['SECRET_KEY', 'DATABASE_URL']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        print(f"❌ Missing required environment variables: {', '.join(missing_vars)}")
        print("💡 Please set these variables before running in production")
        sys.exit(1)